#LHData

LHData主要是操作数据层的框架其中包括2种：
1.网络数据
    (1).LHHTTPRequest 网络请求(基于CFNetWork)
    (2).LHNetWorkReachability 网络监测
    (3).LHWebImage 图片缓存 (基于LHHTTPRequest,LHCache)
2.本地数据
    (1).LHDB 模型化数据库 (基于sqlite3.0,LHModel)
    (2).LHModel JSON<->Model转化
    (3).LHCache 缓存(分为三种:内存缓存,数据库缓存,文件缓存)(基于LHDB)


这几种不同功能的库都是相互联系的所以不能单独使用其中的一种。

LHHTTPRequest:
    基于CFNetWork的网络请求。支持监测进度,范围请求,断点下载,阻塞下载,非阻塞下载。
LHHTTPRequestManager:
    为了使LHHTTPRequest使用不那么复制,使用此类对LHHTTPRequest进行了简单的封装,功能有限。
LHNetWorkReachability:
    使用SystemConfiguration封装了网络监测,类似苹果推荐的Reachability,网络切换的回调方式支持通知和block两种。
LHWebImage:
    一个图片缓存应该具备两点:网络请求和缓存,LHWebImage使用LHHTTPRequest作为下载图片,LHCache实现缓存,加载图片逻辑:
            LHWebImage--->LHMemoryCache--->LHFileCache--->LHHTTPRequest.
LHDB:
    模型化数据库,使用LHModel解析Model,拼接sql语句执行数据库操作。分为两种执行方式:
    1.同步执行(使用OSSpinLock保证线程安全,OSSpinLock是性能最高的锁,不过限制自旋锁可能会存在线程优先级反转的问题,所以在使用LHDB时尽量不要所有不同优先级的线程)。
    2.异步执行(异步执行是我将所有的数据库任务都放到一个静态的serial queue中,这样就可以保证在队列中的任务都会顺序执行防止多线程同时访问一个数据库的问题)。

LHModel:
    JSON与Model的相互转化:
    使用大量runtime的API去实现两者的相互转化,支持较多的类型。LHDB查询出的结果是以字典形式返回的,在返回过程中使用了LHModel对字典进行转化实现了对象存储.

LHCache:
    LHCache包含了三种缓存:
    1.LHMemoryCache:内存缓存,其中设置了最大存储个数,n内部使用CFDictionary存储了一个CacheModel,这个model记录了缓存的使用次数,当缓存个数超过了最大存储个数就会将使用次数最少的缓存移除。内部使用pthread_mutex_t保证线程安全,在接收到内存警告和程序进入后台会自动释放缓存。
    2.LHSqliteCache:数据库缓存,这是磁盘缓存的一种。在数据量较小时可以使用,内部使用LHDB完成数据库操作,其中定义了超时时间,缓存超时就会被清除.(推荐缓存服务器返回的json数据)(因为使用LHSqliteCache会改变LHDBPath的dbPath,而LHDB操作的数据库路径是LHDBPath的dbPath,所以在使用了LHSqliteCache后再使用LHDB,建议改变一下LHDBPath的dbPath,去设置成你想操作的路径)。
    3.LHFileCache:文件缓存,磁盘缓存的一种。在数据量较大时可以使用,内部使用dispatch_semaphore_t保证线程安全,信号量的性能比自旋锁低比pthread_mutex_t高。(LHFileCache内部并没有定义超时时间,所以如果需要清除fileCache需要调用LHFileCache提供的API)(推荐缓存图片,文本,视频等一些较大的数据,LHWebImage使用LHFileCache缓存了图片)。
    
